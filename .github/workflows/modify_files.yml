name: Fetch URLs and update Loon directory

on:
  push:
    branches: [main]
  # schedule a weekly auto update at 12:00 AM every Monday
  schedule:
    - cron: "0 0 * * 1"
  # allow manual trigger via the GitHub UI or API
  workflow_dispatch:

jobs:
  fetch-urls-and-update-loon-directory:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch URLs and update files
        run: |
          declare -a URLS=(
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Zhihu_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Weixin_Official_Accounts_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Weixin_external_links_unlock.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/WexinMiniPrograms_Remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Weibo_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Cainiao_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Bilibili_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Amap_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Himalaya_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/NeteaseCloudMusic_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/JD_Price.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/YouTube_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Remove_ads_by_keli.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/smzdm_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Tencent_Video_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/YouKu_Video_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/iQiYi_Video_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/CoolApk_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/JD_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Taobao_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/Umetrip_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/QQMusic_remove_ads.plugin"
            "https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Plugin/RedPaper_remove_ads.plugin"
          )

          # loop through the URLs and fetch the contents
          for url in "${URLS[@]}"
          do
            # extract the filename from the URL
            filename=$(basename "$url")

            # check if the file exists
            if [ -f "./Loon/$filename" ]; then
              # compare the contents of the existing file with the downloaded content
              if ! cmp -s <(curl -s "$url") "./Loon/$filename"; then
                echo "Updating $filename"
                # overwrite the existing file with the downloaded content
                curl -s "$url" > "./Loon/$filename"
              else
                echo "$filename is up to date"
              fi
            else
              echo "Fetching $url and saving to $filename"
              # create a new file with the downloaded content
              curl -s "$url" > "./Loon/$filename"
            fi
          done

      - name: Process files
        run: |
          # Read all file contents from Loon directory
          files=$(find ./Loon -type f)
          for file in $files
          do
            # Read file content into a variable
            content=$(cat "$file")

            # Apply existing sed modifications
            modified_contents=$(echo "$content" | sed -e 's/\[Rewrite\]/[URL Rewrite]/gmi' \
                                                      -e 's/PROXY/üìΩÔ∏èTiktok/gm' \
                                                      -e 's/reject-.*$/reject/gmi' \
                                                      -e 's/hostname =/hostname = %APPEND%/g' \
                                                      -e 's/, tag =.*$//gm' \
                                                      -e 's/, tag=.*$//gm')

            # Replace 'reject' with '_ reject'
            modified_contents=$(echo "$modified_contents" | sed 's/\breject\b/_ reject/g')

            # Extract and process 'reject-xxx' or 'reject_xxx' lines
            reject_lines=$(echo "$modified_contents" | grep -E 'reject[-_]')
            processed_reject_lines=""
            while read -r line; do
              case $line in
                *reject-dict*|*reject_dict*)
                  line=$(echo "$line" | sed 's/reject[-_]dict/data="https:\/\/raw.githubusercontent.com\/warecast\/modules\/main\/Data\/reject-dict.json"/')
                  ;;
                *reject-200*|*reject_200*)
                  line=$(echo "$line" | sed 's/reject[-_]200/data="https:\/\/raw.githubusercontent.com\/warecast\/modules\/main\/Data\/reject-200.txt"/')
                  ;;
                *reject-img*|*reject_img*)
                  line=$(echo "$line" | sed 's/reject[-_]img/data="https:\/\/raw.githubusercontent.com\/warecast\/modules\/main\/Data\/reject-img.gif"/')
                  ;;
                *reject-array*|*reject_array*)
                  line=$(echo "$line" | sed 's/reject[-_]array/data="https:\/\/raw.githubusercontent.com\/warecast\/modules\/main\/Data\/reject-array.json"/')
                  ;;
              esac
              processed_reject_lines+="$line\n"
            done <<< "$reject_lines"

            # Remove 'reject-xxx' or 'reject_xxx' lines from modified content and append them at the end
            modified_contents=$(echo "$modified_contents" | sed '/reject[-_]/d')
            if [ ! -z "$processed_reject_lines" ]; then
              modified_contents="$modified_contents\n\n[Map Local]\n$processed_reject_lines"
            fi

            # Save modified contents to Surge directory and change file extension
            surge_dir=./Surge
            surge_file=$(basename $file .plugin).sgmodule
            surge_path=$surge_dir/$surge_file

            # Check if the file exists
            if [ -f "$surge_path" ]; then
              # Compare the contents of the existing file with the modified contents
              if ! cmp -s <(echo "$modified_contents") "$surge_path"; then
                echo "Updating $surge_file"
                # Overwrite the existing file with the modified contents
                echo "$modified_contents" > "$surge_path"
              else
                echo "$surge_file is up to date"
              fi
            else
              mkdir -p "$surge_dir"
              echo "Creating $surge_file"
              # Create a new file with the modified contents
              echo "$modified_contents" > "$surge_path"
            fi
          done

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          add: "."
          author_name: "GitHub Action"
          author_email: "action@github.com"
          message: "update and save files"

      - name: Get list of changed files
        run: |
          export CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $GIT_SHA)

      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "Changes made to the following files:\n- ${{ env.CHANGED_FILES }}"
          branch: notify-file-changes
          title: "Notification: Files changed"
          body: "This pull request is generated automatically to notify that the following files have been changed in the recent commit:\n\n${{ env.CHANGED_FILES }}"
          token: ${{ secrets.GITHUB_TOKEN }}
